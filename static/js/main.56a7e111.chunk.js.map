{"version":3,"sources":["components/NewItemFormContainer/styles.ts","components/NewItemFormContainer/index.tsx","utils/useFocus.ts","components/AddNewItem/styles.ts","components/AddNewItem/index.tsx","utils/findItemIndexById.ts","utils/moveItem.ts","utils/insertItemAtIndex.ts","utils/removeItemAtIndex.ts","state/reducers/index.ts","state/mocks.ts","state/AppStateContext.tsx","state/Actions/index.ts","utils/useItemDrag.ts","utils/isHidden.ts","styles.ts","components/Card/styles.ts","components/Card/index.tsx","components/Column/styles.ts","components/Column/index.tsx","components/CustomDragLayer/styles.ts","components/CustomDragLayer/index.tsx","App/styles.ts","App/index.tsx","index.tsx"],"names":["NewItemFormContainerStyle","styled","div","NewItemInputStyle","input","NewItemButtonStyle","button","NewItemFormContainer","onAdd","useState","text","setText","inputRef","ref","useRef","useEffect","current","focus","useFocus","value","onChange","e","target","onKeyPress","key","onClick","AddItemButtonStyle","dark","AddNewItem","props","showForm","setShowForm","toggleButtonText","findItemIndexById","items","id","findIndex","item","moveItem","array","from","to","index","slice","insertItemAtIndex","removeItemAtIndex","appStateReducer","draft","action","type","lists","push","nanoid","payload","tasks","listId","console","log","targetListIndex","draggedId","hoverId","dragIndex","hoverIndex","draggedItem","draggedItemId","hoveredItemId","sourceColumnId","targetColumnId","sourceListIndex","splice","appData","AppStateContext","createContext","useAppState","useContext","AppStateProvider","children","useImmerReducer","state","dispatch","Provider","getTasksByListId","find","list","setDragItem","moveTask","useItemDrag","useDrag","end","drag","preview","getEmptyImage","captureDraggingState","isHidden","itemType","isPreview","Boolean","DragPreviewContainer","undefined","CardStyle","Card","columnId","useDrop","accept","hover","drop","ColumnContainerStyled","ColumnTitleStyled","Column","length","map","task","addTask","CustomDragLayerContainer","DragPreviewWrapper","attrs","position","x","y","style","transform","CustomDragLayer","currentOffset","useDragLayer","monitor","getSourceClientOffset","AppContainerStyled","AppContainer","addList","ReactDOM","render","StrictMode","DndProvider","backend","Backend","document","getElementById"],"mappings":"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","file":"static/js/main.56a7e111.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const NewItemFormContainerStyle = styled.div`\n    max-width: 300px;\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n    align-items: flex-start;\n`;\n\nexport const NewItemInputStyle = styled.input`\n    border-radius: 3px;\n    border: none;\n    box-shadow: #091e4240 0px 1px 0px 0px;\n    margin-bottom: 0.5rem;\n    padding: 0.5rem 1rem;\n    width: 100%;\n`;\n\nexport const NewItemButtonStyle = styled.button`\n    background-color: #5aac44;\n    border-radius: 3px;\n    border: none;\n    box-shadow: none;\n    color: #fff;\n    padding: 6px 12px;\n    text-align: center;\n`;\n","import React, { useState } from 'react';\nimport { useFocus } from '../../utils/useFocus';\nimport { NewItemFormProps } from './intefaces';\nimport { NewItemFormContainerStyle, NewItemInputStyle, NewItemButtonStyle } from './styles';\n\nexport const NewItemFormContainer = ({ onAdd }: NewItemFormProps) => {\n    const [text, setText] = useState('');\n    const inputRef = useFocus();\n\n    const handleAddText = (e: React.KeyboardEvent<HTMLInputElement>) => {\n        if (e.key === 'Enter') {\n            onAdd(text);\n        }\n    };\n\n    return (\n        <NewItemFormContainerStyle>\n            <NewItemInputStyle\n                ref={inputRef}\n                value={text}\n                onChange={(e) => setText(e.target.value)}\n                onKeyPress={handleAddText}\n            />\n            <NewItemButtonStyle onClick={() => onAdd(text)}>Create</NewItemButtonStyle>\n        </NewItemFormContainerStyle>\n    );\n};\n","import { useRef, useEffect } from 'react';\n\nexport const useFocus = () => {\n    const ref = useRef<HTMLInputElement>(null);\n    useEffect(() => {\n        ref.current?.focus();\n    });\n\n    return ref;\n};\n","import styled from 'styled-components';\nimport { AddNewItemProps } from './intefaces';\n\nexport const AddItemButtonStyle = styled.button<Partial<AddNewItemProps>>`\n    background-color: #ffffff3d;\n    border-radius: 3px;\n    border: none;\n    color: ${({ dark }) => (dark ? '#000' : '#fff')};\n    cursor: pointer;\n    max-width: 300px;\n    padding: 10px 12px;\n    text-align: left;\n    transition: background 85ms ease-in;\n    width: 100%;\n    &:hover {\n        background-color: #ffffff52;\n    }\n`;\n","import { useState } from 'react';\nimport { AddNewItemProps } from './intefaces';\nimport { NewItemFormContainer } from '../NewItemFormContainer';\n\nimport { AddItemButtonStyle } from './styles';\n\nexport const AddNewItem = (props: AddNewItemProps) => {\n    const [showForm, setShowForm] = useState(false);\n    const { onAdd, toggleButtonText, dark } = props;\n\n    return (\n        <>\n            {showForm && (\n                <NewItemFormContainer\n                    onAdd={(text) => {\n                        onAdd(text);\n                        setShowForm(!showForm);\n                    }}\n                />\n            )}\n            <AddItemButtonStyle dark={dark} onClick={() => setShowForm(!showForm)}>\n                {toggleButtonText}\n            </AddItemButtonStyle>\n        </>\n    );\n};\n","type Item = {\n    id: string;\n};\n\nexport const findItemIndexById = <TItem extends Item>(items: TItem[], id: string) => {\n    return items.findIndex((item: TItem) => item.id === id);\n};\n","import { removeItemAtIndex } from './removeItemAtIndex';\nimport { insertItemAtIndex } from './insertItemAtIndex';\n\nexport const moveItem = <TItem>(array: TItem[], from: number, to: number) => {\n    const item = array[from];\n    return insertItemAtIndex(removeItemAtIndex(array, from), item, to);\n};\n","export function insertItemAtIndex<TItem>(array: TItem[], item: TItem, index: number) {\n    return [...array.slice(0, index), item, ...array.slice(index)];\n}\n","export function removeItemAtIndex<TItem>(array: TItem[], index: number) {\n    return [...array.slice(0, index), ...array.slice(index + 1)];\n}\n","import { nanoid } from 'nanoid';\nimport { findItemIndexById } from '../../utils/findItemIndexById';\nimport { moveItem } from '../../utils/moveItem';\nimport { Action } from '../Actions/interfaces';\nimport { AppState } from '../intefaces';\n\nexport const appStateReducer = (draft: AppState, action: Action): AppState | void => {\n    switch (action.type) {\n        case 'ADD_LIST': {\n            draft.lists.push({\n                id: nanoid(),\n                text: action.payload,\n                tasks: []\n            });\n            break;\n        }\n        case 'ADD_TASK': {\n            const { text, listId } = action.payload;\n            console.log('draft', draft);\n            const targetListIndex = findItemIndexById(draft.lists, listId);\n            // console.log('targetListIndex', targetListIndex);\n            // console.log('draft.lists[targetListIndex].tasks', draft.lists[targetListIndex]);\n            draft.lists[targetListIndex].tasks.push({\n                id: nanoid(),\n                text\n            });\n            break;\n        }\n        case 'MOVE_LIST': {\n            const { draggedId, hoverId } = action.payload;\n            const dragIndex = findItemIndexById(draft.lists, draggedId);\n            const hoverIndex = findItemIndexById(draft.lists, hoverId);\n            draft.lists = moveItem(draft.lists, dragIndex, hoverIndex);\n            break;\n        }\n        case 'SET_DRAGGED_ITEM': {\n            draft.draggedItem = action.payload;\n            break;\n        }\n        case 'MOVE_TASK': {\n            const { draggedItemId, hoveredItemId, sourceColumnId, targetColumnId } = action.payload;\n\n            const sourceListIndex = findItemIndexById(\n                draft.lists,\n                sourceColumnId\n            );\n\n            const targetListIndex = findItemIndexById(\n                draft.lists,\n                targetColumnId\n            );\n\n            const dragIndex = findItemIndexById(\n                draft.lists[sourceListIndex].tasks,\n                draggedItemId\n            );\n\n            const hoverIndex = hoveredItemId\n                ? findItemIndexById(\n                    draft.lists[targetListIndex].tasks,\n                    hoveredItemId\n                )\n                : 0;\n\n            const item = draft.lists[sourceListIndex].tasks[dragIndex];\n\n            draft.lists[sourceListIndex].tasks.splice(dragIndex, 1);\n            draft.lists[targetListIndex].tasks.splice(hoverIndex, 0, item);\n            break;\n        }\n        default: {\n            break;\n        }\n    }\n};\n","import { AppState } from './intefaces';\n\nexport const appData: AppState = {\n    draggedItem: null,\n    lists: [\n        {\n            id: '0',\n            text: 'To Do',\n            tasks: [{ id: 'c0', text: 'Generate app scaffold' }]\n        },\n        {\n            id: '1',\n            text: 'In Progress',\n            tasks: [{ id: 'c2', text: 'Learn Typescript' }]\n        },\n        {\n            id: '2',\n            text: 'Done',\n            tasks: [{ id: 'c3', text: 'Begin to use static typing' }]\n        }\n    ]\n};\n","import { createContext, useContext, FC } from 'react';\nimport { useImmerReducer } from 'use-immer';\nimport { appStateReducer } from './reducers';\nimport { AppStateContextProps } from './intefaces';\nimport { appData } from './mocks';\n\nconst AppStateContext = createContext<AppStateContextProps>({} as AppStateContextProps);\n\nexport const useAppState = () => {\n    return useContext(AppStateContext);\n};\n\nexport const AppStateProvider: FC = ({ children }) => {\n    const [state, dispatch] = useImmerReducer(appStateReducer, appData);\n    const { lists, draggedItem } = state;\n    const getTasksByListId = (id: string) => {\n        return lists.find((list) => list.id === id)?.tasks || [];\n    };\n    return (\n        <AppStateContext.Provider value={{ lists, draggedItem, getTasksByListId, dispatch }}>\n            {children}\n        </AppStateContext.Provider>\n    );\n};\n","import { DragItem } from '../intefaces';\nimport { Action } from './interfaces';\n\nexport const addTask = (text: string, listId: string): Action => ({\n    type: 'ADD_TASK',\n    payload: { text, listId }\n});\n\nexport const addList = (text: string): Action => ({\n    type: 'ADD_LIST',\n    payload: text\n});\n\nexport const moveList = (draggedId: string, hoverId: string): Action => ({\n    type: 'MOVE_LIST',\n    payload: {\n        draggedId,\n        hoverId\n    }\n});\n\nexport const setDragItem = (draggedItem: DragItem | null): Action => ({\n    type: 'SET_DRAGGED_ITEM',\n    payload: draggedItem\n});\n\nexport const moveTask = (draggedItemId: string, hoveredItemId: string | null, sourceColumnId: string, targetColumnId: string): Action => ({\n    type: 'MOVE_TASK',\n    payload: {\n        draggedItemId,\n        hoveredItemId,\n        sourceColumnId,\n        targetColumnId\n    }\n})","import { useEffect } from 'react'\nimport { useDrag } from 'react-dnd';\nimport { useAppState } from '../state/AppStateContext';\nimport { DragItem } from '../state/intefaces';\nimport { setDragItem } from '../state/Actions';\nimport { getEmptyImage } from 'react-dnd-html5-backend';\n\nexport const useItemDrag = (item: DragItem) => {\n    const { dispatch } = useAppState();\n    const [, drag, preview] = useDrag({\n        type: item.type,\n        item: () => {\n            dispatch(setDragItem(item));\n            return item;\n        },\n        end: () => dispatch(setDragItem(null))\n    });\n    useEffect(() => {\n        preview(getEmptyImage(), { captureDraggingState: true })\n    }, [preview])\n    return { drag };\n};\n","import { DragItem } from \"../state/intefaces\";\n\n\nexport const isHidden = (draggedItem: DragItem | null, itemType: string, id: string, isPreview?: boolean) => {\n    return Boolean(!isPreview && draggedItem && draggedItem.type === itemType && draggedItem.id === id);\n}","import styled from 'styled-components';\nimport { DragPreviewContainerProps } from './interfaces';\n\nexport const DragPreviewContainer = styled.div<DragPreviewContainerProps>`\n    transform: ${props => (props.isPreview ? \"rotate(5deg)\" : undefined)};\n    opacity: ${({ isHidden }) => (isHidden ? 0.3 : 1)};\n`;\n","import styled from 'styled-components';\nimport { DragPreviewContainer } from '../../styles';\n\nexport const CardStyle = styled(DragPreviewContainer)`\n    background-color: #fff;\n    cursor: pointer;\n    margin-bottom: 0.5rem;\n    padding: 0.5rem 1rem;\n    max-width: 300px;\n    border-radius: 3px;\n    box-shadow: #091e4240 0px 1px 0px 0px;\n`;\n","import { useRef } from \"react\";\nimport { useItemDrag } from \"../../utils/useItemDrag\";\nimport { useDrop } from \"react-dnd\";\nimport { useAppState } from \"../../state/AppStateContext\";\nimport { isHidden } from \"../../utils/isHidden\"\nimport { moveTask } from \"../../state/Actions\"\nimport { CardProps } from './interfaces';\nimport { CardStyle } from './styles';\n\nexport const Card = ({ text, id, columnId, isPreview }: CardProps) => {\n    const { draggedItem, dispatch } = useAppState();\n    const ref = useRef<HTMLDivElement>(null);\n\n    const { drag } = useItemDrag({\n        type: \"CARD\",\n        id,\n        text,\n        columnId\n    });\n\n    const [, drop] = useDrop({\n        accept: \"CARD\",\n        hover() {\n            if (!draggedItem) {\n                return\n            }\n            if (draggedItem.type !== \"CARD\") {\n                return\n            }\n            if (draggedItem.id === id) {\n                return\n            }\n            dispatch(\n                moveTask(draggedItem.id, id, draggedItem.columnId, columnId)\n            )\n        }\n    });\n\n    drag(drop(ref));\n\n\n    return <CardStyle isHidden={isHidden(draggedItem, \"CARD\", id, isPreview)} isPreview={isPreview} ref={ref}>{text}</CardStyle>;\n};\n","import styled from 'styled-components';\nimport { DragPreviewContainer } from '../../styles';\n\nexport const ColumnContainerStyled = styled(DragPreviewContainer)`\n    background-color: #ebecf0;\n    width: 300px;\n    min-height: 40px;\n    margin-right: 20px;\n    border-radius: 3px;\n    padding: 8px 8px;\n    flex-grow: 0;\n`;\n\nexport const ColumnTitleStyled = styled.div`\n    padding: 6px 16px 12px;\n    font-weight: bold;\n`;\n","import { FC, useRef } from 'react';\nimport { useDrop } from 'react-dnd';\nimport { AddNewItem } from '../AddNewItem';\nimport { Card } from '../Card';\nimport { useAppState } from '../../state/AppStateContext';\nimport { moveList, addTask, moveTask, setDragItem } from '../../state/Actions';\nimport { useItemDrag } from '../../utils/useItemDrag';\nimport { ColumnProps } from './interfaces';\nimport { isHidden } from '../../utils/isHidden';\nimport { ColumnContainerStyled, ColumnTitleStyled } from './styles';\n\nexport const Column: FC<ColumnProps> = ({ id, text, isPreview }) => {\n    const { draggedItem, getTasksByListId, dispatch } = useAppState();\n    const ref = useRef<HTMLDivElement>(null);\n    const tasks = getTasksByListId(id);\n\n    const { drag } = useItemDrag({ type: 'COLUMN', id, text });\n\n    const [, drop] = useDrop({\n        accept: ['COLUMN', 'CARD'],\n        hover() {\n            if (!draggedItem) {\n                return;\n            }\n            if (draggedItem.type === 'COLUMN') {\n                if (draggedItem.id === id) {\n                    return;\n                }\n                dispatch(moveList(draggedItem.id, id));\n            } else {\n                if (draggedItem.columnId === id) {\n                    return\n                }\n                if (tasks.length) {\n                    return\n                }\n                dispatch(\n                    moveTask(draggedItem.id, null, draggedItem.columnId, id)\n                );\n                dispatch(setDragItem({ ...draggedItem, columnId: id }))\n            }\n\n        }\n    });\n\n    drag(drop(ref));\n\n    return (\n        <ColumnContainerStyled isPreview={isPreview} ref={ref} isHidden={isHidden(draggedItem, \"COLUMN\", id)}>\n            <ColumnTitleStyled>{text}</ColumnTitleStyled>\n            {tasks.map((task) => (\n                <Card key={task.id} id={task.id} text={task.text} columnId={id} />\n            ))}\n            <AddNewItem\n                toggleButtonText=\"toggleButtonText\"\n                onAdd={(text) => dispatch(addTask(text, id))}\n                dark\n            />\n        </ColumnContainerStyled>\n    );\n};\n","import styled from 'styled-components';\nimport { DragPreviewWrapperProps } from './interfaces'\n\nexport const CustomDragLayerContainer = styled.div` \nheight: 100%;\nleft: 0;\npointer-events: none;\n  position: fixed;\n  top: 0;\n  width: 100%;\n  z-index: 100;\n`\n\n\nexport const DragPreviewWrapper = styled.div.attrs<DragPreviewWrapperProps>(\n    ({ position: { x, y } }) => ({\n        style: {\n            transform: `translate(${x}px, ${y}px)`\n        }\n    })) <DragPreviewWrapperProps>``","import { useDragLayer } from \"react-dnd\";\nimport { Column } from \"../Column\";\nimport { Card } from \"../Card\";\nimport { CustomDragLayerContainer, DragPreviewWrapper } from \"./styles\";\nimport { useAppState } from \"../../state/AppStateContext\";\n\n\nexport const CustomDragLayer = () => {\n    const { draggedItem } = useAppState();\n\n    const { currentOffset } = useDragLayer((monitor) => ({\n        currentOffset: monitor.getSourceClientOffset()\n    }));\n\n    const showCustomDragLayer = draggedItem && currentOffset;\n\n    return showCustomDragLayer && (\n        <CustomDragLayerContainer>\n            <DragPreviewWrapper position={currentOffset}>\n                {draggedItem.type === 'COLUMN' ? (\n                    <Column\n                        id={draggedItem.id}\n                        text={draggedItem.text}\n                        isPreview />\n                )\n                    : (\n                        <Card\n                            columnId={draggedItem.columnId}\n                            isPreview\n                            id={draggedItem.id}\n                            text={draggedItem.text}\n                        />\n                    )}\n            </DragPreviewWrapper>\n        </CustomDragLayerContainer>\n    );\n}","import styled from 'styled-components';\n\nexport const AppContainerStyled = styled.div`\n    display: flex;\n    align-items: flex-start;\n    flex-direction: row;\n    height: 100%;\n    padding: 20px;\n    width: 100%;\n`;\n\nexport const CardContainer = styled.div`\n    background-color: #fff;\n    cursor: pointer;\n    margin-bottom: 0.5rem;\n    padding: 0.5rem 1rem;\n    max-width: 300px;\n    border-radius: 3px;\n    box-shadow: #091e4240 0px 1px 0px 0px;\n`;\n","import { FC } from 'react';\nimport { CustomDragLayer } from '../components/CustomDragLayer'\nimport { addList } from '../state/Actions';\nimport { Column } from '../components/Column';\nimport { AddNewItem } from '../components/AddNewItem';\nimport { useAppState } from '../state/AppStateContext';\n\nimport { AppContainerStyled } from './styles';\n\nexport const AppContainer: FC = () => {\n    const { lists, dispatch } = useAppState();\n    return (\n        <AppContainerStyled>\n            <CustomDragLayer />\n            {lists.map((list) => (\n                <Column key={list.id} text={list.text} id={list.id} />\n            ))}\n            <AddNewItem\n                toggleButtonText=\"+ Add another list\"\n                onAdd={(text) => dispatch(addList(text))}\n            />\n        </AppContainerStyled>\n    );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { DndProvider } from 'react-dnd';\nimport { HTML5Backend as Backend } from 'react-dnd-html5-backend';\nimport { AppContainer } from './App';\nimport { AppStateProvider } from './state/AppStateContext';\n\nimport './index.css';\n\nReactDOM.render(\n    <React.StrictMode>\n        <DndProvider backend={Backend}>\n            <AppStateProvider>\n                <AppContainer />\n            </AppStateProvider>\n        </DndProvider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}